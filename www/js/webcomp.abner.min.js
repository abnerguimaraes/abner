"use strict";

//Verfica Sistema Operacional
window.isIOS = (/iPad|iPhone|iPod/.test(navigator.platform) || (navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1)) && !window.MSStream;
window.isAndroid = /(android)/i.test(navigator.userAgent);
window.isDesktop = !window.isIOS && !window.isAndroid;

(function(w, $, undefined) {

    w.tapHandling = false;
    w.tappy = true;

    var tap = function($els) {
        return $els.each(function() {

            var $el = $(this),
                resetTimer,
                startY,
                startX,
                cancel,
                scrollTolerance = 10;

            function trigger(e) {
                $(e.target).trigger("tap", [e, $(e.target).attr("href")]);
            }

            function getCoords(e) {
                var ev = e.originalEvent || e,
                    touches = ev.touches || ev.targetTouches;

                if (touches) {
                    return [touches[0].pageX, touches[0].pageY];
                } else {
                    return null;
                }
            }

            function start(e) {
                if (e.touches && e.touches.length > 1 || e.targetTouches && e.targetTouches.length > 1) {
                    return false;
                }

                var coords = getCoords(e);
                startX = coords[0];
                startY = coords[1];
            }

            // any touchscroll that results in > tolerance should cancel the tap
            function move(e) {
                if (!cancel) {
                    var coords = getCoords(e);
                    if (coords && (Math.abs(startY - coords[1]) > scrollTolerance || Math.abs(startX - coords[0]) > scrollTolerance)) {
                        cancel = true;
                    }
                }
            }

            function end(e) {
                clearTimeout(resetTimer);
                resetTimer = setTimeout(function() {
                    w.tapHandling = false;
                    cancel = false;
                }, 1000);

                // make sure no modifiers are present. thx http://www.jacklmoore.com/notes/click-events/
                if ((e.which && e.which > 1) || e.shiftKey || e.altKey || e.metaKey || e.ctrlKey) {
                    return;
                }

                e.preventDefault();

                // this part prevents a double callback from touch and mouse on the same tap

                // if a scroll happened between touchstart and touchend
                if (cancel || w.tapHandling && w.tapHandling !== e.type) {
                    cancel = false;
                    return;
                }

                w.tapHandling = e.type;
                trigger(e);
            }

            $el
                .bind("touchstart.tappy MSPointerDown.tappy", start)
                .bind("touchmove.tappy MSPointerMove.tappy", move)
                .bind("touchend.tappy MSPointerUp.tappy", end)
                .bind("click.tappy", end);
        });
    };

    var untap = function($els) {
        return $els.unbind(".tappy");
    };

    // use special events api
    if ($.event && $.event.special) {
        $.event.special.tap = {
            add: function(handleObj) {
                tap($(this));
            },
            remove: function(handleObj) {
                untap($(this));
            }
        };
    } else {
        // monkeybind
        var oldBind = $.fn.bind,
            oldUnbind = $.fn.unbind;
        $.fn.bind = function(evt) {
            if (/(^| )tap( |$)/.test(evt)) {
                tap(this);
            }
            return oldBind.apply(this, arguments);
        };
        $.fn.unbind = function(evt) {
            if (/(^| )tap( |$)/.test(evt)) {
                untap(this);
            }
            return oldUnbind.apply(this, arguments);
        };
    }

}(this, jQuery));


// ARRUMA ERRO NO IE9 ONDE NAO EXISTE WINDOW.CONSOLE
if (!window.console) {
    var console = {
        log: function() {},
        warn: function() {},
        error: function() {},
        time: function() {},
        timeEnd: function() {}
    }
}

/* ARRUMA INPUT NO IOS QUE NAO FUNCIONA DIREITO */
/*$(document).ready(function() {
    if (window.isIOS) {
        $(document).ready(function() {
            document.addEventListener('keydown', function(e) {
                window.focus();
                $(':focus').focus();
            });
        });
    }

});*/

var getXY = function(event) {
    var x = null;
    var y = null;

    if (event.originalEvent != null && event.originalEvent.touches != null) {
        var touch = event.originalEvent.touches[0] || event.originalEvent.changedTouches[0];
        x = parseFloat(touch.pageX);
        y = parseFloat(touch.pageY);
    } else {
        x = parseFloat(event.pageX);
        y = parseFloat(event.pageY);
    }

    var pos = new Object();
    pos.x = x;
    pos.y = y;

    return pos;
}

var support3d = function() {
    var ret = false;
    var supports3DTransforms = document.body.style['webkitPerspective'] !== undefined || document.body.style['MozPerspective'] !== undefined;
    if (supports3DTransforms) {
        ret = true;
    }
    return ret;
}

var getTransform = function(el) {
    var prop = "";

    if (el.css('-webkit-transform') != undefined) {
        prop = el.css('-webkit-transform');
    } else if (el.css('transform') != undefined) {
        prop = el.css('transform');
    } else if (el.css('-moz-transform') != undefined) {
        prop = el.css('-moz-transform');
    } else if (el.css('-ms-transform') != undefined) {
        prop = el.css('-ms-transform');
    } else {
        return [0, 0, 0];
    }

    var results = prop.match(/matrix(?:(3d)\(-{0,1}\d+(?:, -{0,1}\d+)*(?:, (-{0,1}\d+))(?:, (-{0,1}\d+))(?:, (-{0,1}\d+)), -{0,1}\d+\)|\(-{0,1}\d+(?:, -{0,1}\d+)*(?:, (-{0,1}\d+))(?:, (-{0,1}\d+))\))/);

    if (!results)
        return [0, 0, 0];
    if (results[1] == '3d')
        return results.slice(2, 5);

    results.push(0);
    return results.slice(5, 8);
}

var goToNextTabindex = function(event, obj, command) {
    var key = event.keyCode ? event.keyCode : event.which;

    if (key == 13 || key == 9) {
        var ficar = true;
        var ret = true;
        var tabindex = obj.attr('tabindex');

        if (key == 13 && obj[0].nodeName == "TEXTAREA") {
            return;
        }

        do {
            //Verifica o tabindex
            var gotoTabindex = obj.attr('goto-tab-index');
            var stopTabindex = obj.attr('stop-tab-index');

            //Vai opara
            if (tabindex && stopTabindex != "true") {
                tabindex = parseInt(tabindex);

                //avanca o tabindex
                if (gotoTabindex) {
                    tabindex = gotoTabindex;
                } else {
                    tabindex++;
                }

                //se Existir o elemento foca nele
                var nextObj = $('[tab-index=' + tabindex + ']');

                //Verifica se encontrou um objeto
                if (nextObj.length > 0 && nextObj.attr("is-disabled") != "true") {
                    ficar = false;                    

                    if (nextObj[0].nodeName == "ABNER-SELECT-UNDERLINE") {
                        nextObj.find("select").trigger("focus");
                    } else {
                        nextObj.find("[div-focus=true]").trigger(command);
                    };
                } else {
                    if (nextObj.length > 0) {
                        //verifica o proximo objeto
                        obj = nextObj;
                    } else {
                        ficar = false;
                    }
                }

                //removido para funcionar o enter
                //return false;
            } else {
                if (stopTabindex == "true") {
                    ficar = false;
                    ret = false;
                } else {
                    ficar = false;
                    ret = true;
                }

            }
        }
        while (ficar);

        //Se for tab deixar false
        if (key == 9) {
            ret = false;
        }

        //rodar saida
        return ret;
    }

}

var randomNumber = function() {
    //var random_integer = Math.random()*101|0;    
    return Math.random().toString(36).substr(2, 10);
}

var guid = function() {
    function s4() {
        return Math.floor((1 + Math.random()) * 0x10000)
            .toString(16)
            .substring(1);
    }
    return s4() + s4() + '-' + s4() + '-' + s4() + '-' +
        s4() + '-' + s4() + s4() + s4();
}

var generateID = function() {
    return guid();
}

var pointerEventToXY = function(e) {
    var out = { x: 0, y: 0 };
    if (e.type == 'touchstart' || e.type == 'touchmove' || e.type == 'touchend' || e.type == 'touchcancel') {
        var touch = e.originalEvent.touches[0] || e.originalEvent.changedTouches[0];
        out.x = touch.pageX;
        out.y = touch.pageY;
    } else if (e.type == 'mousedown' || e.type == 'mouseup' || e.type == 'mousemove' || e.type == 'mouseover' || e.type == 'mouseout' || e.type == 'mouseenter' || e.type == 'mouseleave') {
        out.x = e.pageX;
        out.y = e.pageY;
    }
    return out;
};
"use strict";

//component-wrapper: non-functional

//Criando namespace utils
var PmbUtils = function () { }


PmbUtils.prototype.removeAccent = function (word) {
    var _this = this;

    var map = {
        "á": "a",
        "à": "a",
        "â": "a",
        "ã": "a",
        "ä": "a",
        "Á": "A",
        "À": "A",
        "Â": "A",
        "Ã": "A",
        "Ä": "A",
        "é": "e",
        "è": "e",
        "ê": "e",
        "ẽ": "e",
        "ë": "e",
        "É": "E",
        "È": "E",
        "Ê": "E",
        "Ẽ": "E",
        "Ë": "E",
        "í": "i",
        "ì": "i",
        "î": "i",
        "ĩ": "i",
        "ï": "i",
        "Í": "I",
        "Ì": "I",
        "Î": "I",
        "Ĩ": "I",
        "Ï": "I",
        "ó": "o",
        "ò": "o",
        "ô": "o",
        "õ": "o",
        "ö": "o",
        "Ó": "O",
        "Ò": "O",
        "Ô": "O",
        "Õ": "O",
        "Ö": "O",
        "ú": "u",
        "ù": "u",
        "û": "u",
        "ũ": "u",
        "ü": "u",
        "Ú": "U",
        "Ù": "U",
        "Û": "U",
        "Ũ": "U",
        "Ü": "U",
        "ý": "y",
        "ỳ": "y",
        "ŷ": "y",
        "ỹ": "y",
        "ÿ": "y",
        "Ý": "Y",
        "Ỳ": "Y",
        "Ŷ": "Y",
        "Ỹ": "Y",
        "Ÿ": "Y",
        "ñ": "n",
        "Ñ": "n",
        "Ç": "c",
        "ç": "c"
    };

    if (word != "") {
        return word.replace(/[àèìòùÀÈÌÒÙáéíóúýÁÉÍÓÚÝâêîôûÂÊÎÔÛãẽĩũñõÃẼĨŨÑÕäëïöüÿÄËÏÖÜŸÇç]/g, function (match) {
            return map[match];
        });
    } else {
        return null;
    }
}

//PEga variaveis da URL
PmbUtils.prototype.getUrlVars = function () {
    var vars = new Object(),
        hash;
    var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
    for (var i = 0; i < hashes.length; i++) {
        hash = hashes[i].split('=');
        vars[hash[0]] = hash[1];
    }
    return vars;
}

//Determina se é modo adaptativo 
PmbUtils.prototype.showBigScreen = function (obj) {
    if (parseInt(obj.outerWidth()) >= 1024) {
        return true;
    } else {
        return false;
    }
}

PmbUtils.prototype.getCheckedRadio = function (name) {
    if (name) {
        return $("input[type=radio][name=" + name + "]:checked").parent();
    } else {
        return $("input[type=radio]:checked").parent();
    }
}

PmbUtils.prototype.getPhoneAsObject = function (phone) {

    var phoneObj = {
        ddi: "",
        ddd: "",
        phone: phone
    };

    phone = phone ? phone.replace(/\D+/g, '') : phone;

    if (phone && phone.length > 11) {
        phoneObj.ddi = phone.replace(/^(\d{2})(\d{2})(\d{8,9})$/g, "\$1");
        phoneObj.ddd = phone.replace(/^(\d{2})(\d{2})(\d{8,9})$/g, "\$2");
        phoneObj.phone = phone.replace(/^(\d{2})(\d{2})(\d{8,9})$/g, "\$3");
    } else if (phone && phone.length > 9) {
        phoneObj.ddd = phone.replace(/^(\d{2})(\d{8,9})$/g, "\$1");
        phoneObj.phone = phone.replace(/^(\d{2})(\d{8,9})$/g, "\$2");
    }

    return phoneObj;
}

PmbUtils.prototype.formatPhone = function (phone) {

    var phoneReturn = phone.replace(/[^0-9]/g, '');

    if (phone && phone.length > 11) {
        phoneReturn = phone.replace(/^(\d{2})(\d{2})(\d{4,5})(\d{4})$/g, "\+$1 \($2) \$3 \$4");
    } else if (phone && phone.length > 9) {
        phoneReturn = phone.replace(/^(\d{2})(\d{4,5})(\d{4})$/g, "\($1) \$2 \$3");
    };

    return phoneReturn;
}

PmbUtils.prototype.removeCpfCnpjFormat = function (valor, type) {

    if (valor) {
        //remove ponto e virgula
        valor = valor.replace(new RegExp(/[^\d]/g), "");

        if (type == "CNPJ") {
            var len = 14;
            var pad = "00000000000";
        } else if (type == "CPF") {
            var len = 11;
            var pad = "00000000000";
        } else {
            return "";
        }

        //transforma para numero
        valor = parseInt(valor);

        //se for maior que o valor defindo para len ele corta
        if (valor.length > len) {
            valor = valor.substring(0, len);
        }

        //Se ocorre algum erro, deixar vazio
        if (isNaN(valor)) {
            valor = "";

        } else {
            valor = pad.substring(0, pad.length - valor.length) + valor;
        }
    }
    return valor;
}

PmbUtils.prototype.validarCNPJ = function (cnpj) {

    cnpj = cnpj.replace(/[^\d]+/g, '');
    
    if (cnpj == "0" ||
        cnpj == "00000000000000" ||
        cnpj == "11111111111111" ||
        cnpj == "22222222222222" ||
        cnpj == "33333333333333" ||
        cnpj == "44444444444444" ||
        cnpj == "55555555555555" ||
        cnpj == "66666666666666" ||
        cnpj == "77777777777777" ||
        cnpj == "88888888888888" ||
        cnpj == "99999999999999") {
        return false;
    }

    // Valida DVs
    var tamanho = cnpj.length - 2
    var numeros = cnpj.substring(0, tamanho);
    var digitos = cnpj.substring(tamanho);
    var soma = 0;
    var pos = tamanho - 7;
    var i = tamanho;

    for (i = tamanho; i >= 1; i--) {
        soma += numeros.charAt(tamanho - i) * pos--;
        if (pos < 2)
            pos = 9;
    }
    var resultado = soma % 11 < 2 ? 0 : 11 - soma % 11;
    if (resultado != digitos.charAt(0)) {
        return false;
    }

    tamanho = tamanho + 1;
    numeros = cnpj.substring(0, tamanho);
    soma = 0;
    pos = tamanho - 7;
    for (i = tamanho; i >= 1; i--) {
        soma += numeros.charAt(tamanho - i) * pos--;
        if (pos < 2)
            pos = 9;
    }

    resultado = soma % 11 < 2 ? 0 : 11 - soma % 11;

    if (resultado != digitos.charAt(1)) {
        return false;
    }

    return true;
}

//valida o CPF digitado
PmbUtils.prototype.validarCPF = function(cpf) {

    var exp = /\.|\-/g
    cpf = cpf.toString().replace(exp, "");
    if (cpf.length < 11) {
        var pad = "00000000000";
        cpf = pad.substring(0, pad.length - cpf.length) + cpf;
    }

    if (cpf == "0" ||
        cpf == "00000000000" ||
        cpf == "11111111111" ||
        cpf == "22222222222" ||
        cpf == "33333333333" ||
        cpf == "44444444444" ||
        cpf == "55555555555" ||
        cpf == "66666666666" ||
        cpf == "77777777777" ||
        cpf == "88888888888" ||
        cpf == "99999999999") {
        return false;
    }

    var soma;
    var resto;
    soma = 0;

    for (var i = 1; i <= 9; i++) {
        soma = soma + parseInt(cpf.substring(i - 1, i)) * (11 - i);
    }

    resto = (soma * 10) % 11;

    if ((resto == 10) || (resto == 11)) {
        resto = 0;
    }
    if (resto != parseInt(cpf.substring(9, 10))) {
        return false;
    }

    soma = 0;
    for (var i = 1; i <= 10; i++) {
        soma = soma + parseInt(cpf.substring(i - 1, i)) * (12 - i);
    }
    resto = (soma * 10) % 11;

    if ((resto == 10) || (resto == 11)) {
        resto = 0;
    }
    if (resto != parseInt(cpf.substring(10, 11))) {
        return false;
    }
    return true;
}

PmbUtils.prototype.validarEMAIL = function(email) {
    var emailValidation = email.match(/^[a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\.[a-zA-Z0-9._-]+$/);

    if (email == emailValidation) {
        return emailValidation;
    }
}

//Funcoes uteis de uso do JQUERY
window.addEventListener('WebComponentsReady', function () {
    document.querySelector("html").classList.add("html-page-loaded");
});

$(document).ready(function () {
    $.fn.setCursorPosition = function (pos) {
        this.each(function (index, elem) {
            if (elem.setSelectionRange) {
                elem.setSelectionRange(pos, pos);
            } else if (elem.createTextRange) {
                var range = elem.createTextRange();
                range.collapse(true);
                range.moveEnd('character', pos);
                range.moveStart('character', pos);
                range.select();
            }
        });
        return this;
    };

    $.fn.validate = function () {
        var change = null;
        var tag = new String();
        //Tratamento
        if ($(this).length > 0) {
            tag += $(this)[0].nodeName;
            if (tag) {
                tag = tag.toUpperCase();
            }
        } else {
            return null;
        }

        if ($(this).attr("onchange")) {
            change = $(this).attr("onchange");
            $(this).removeAttr("onchange");
        }

        //tira o foco de qualquer elemento
        document.activeElement.blur();
        $(window).focus();

        if (change != null) {
            $(this).attr("onchange", change);
        }

        //se ouver um erro validacao esta incorreta
        if ($(this).attr("error") && $(this).attr("error") != "") {
            return false;
        } else {
            return true;
        }
    };

    $.fn.setFocus = function () {
        if ($(this).length > 0) {
            $(this).find("input").focus();
        } else {
            return null;
        }
    }

    $.fn.removeFocus = function () {
        if (document.activeElement) {
            document.activeElement.blur();
        }
    }

    $.fn.getText = function () {
        var text = null;
        var tag = new String();
        //Tratamento
        if ($(this).length > 0) {
            tag += $(this)[0].nodeName;
            if (tag) {
                tag = tag.toUpperCase().startsWith("AB-INPUT") ? "AB-INPUT" : tag.toUpperCase();
                var tagsAceitas = ["AB-TEXT-READ-ONLY", "AB-TEXT-AREA-UNDERLINE", "AB-SELECT-UNDERLINE", "AB-INPUT"];
                if (tagsAceitas.indexOf(tag) == -1) {
                    return null;
                }
            }
        } else {
            return null;
        }

        if ($(this).length > 1) {
            var textArray = new Array();
            for (const radio of this) {
                textArray.push(radio.getText());
            }
            text = textArray;
        } else {
            text = this[0].getText();
        };

        return text;
    };

    $.fn.setText = function (text, cancel) {
        var tag = new String();

        //Tratamento
        if ($(this).length > 0) {
            tag += $(this)[0].nodeName;
            if (tag) {
                tag = tag.toUpperCase();
            }
        } else {
            return null;
        }

        if (tag == "AB-TEXT-READ-ONLY") {
            this[0].setText(text);

        } else if (tag.startsWith("AB-INPUT-DATE")) {
            this[0].setText(text);

        } else if (tag.startsWith("AB-INPUT")) {
            this[0].setText(text);

        } else if (tag == "AB-TEXT-AREA-UNDERLINE") {
            this[0].setText(text);

        } else if (tag.startsWith("AB-SELECT")) {
            if (cancel) {
                $(this).find("select").val(text);
            } else {
                $(this).find("select").val(text).change();
            }
        }

        //salva valor
        if (!tag.startsWith("AB-INPUT-CHECKBOX")) {
            $(this).attr("loaded-value", $(this).getText());
        }
    };


    //funcao para corrigir o data
    $.fn.getNumber = function () {
        var text = null;
        var tag = new String();
        //Tratamento
        if ($(this).length > 0) {
            tag += $(this)[0].nodeName;
            if (tag) {
                tag = tag.toUpperCase();
            }
        } else {
            return null;
        }

        if (tag == "AB-TEXT-READ-ONLY") {
            text = this[0].getText();

        } else if (tag.startsWith("AB-INPUT-CHECKBOX")) {
            text = this[0].getNumber();

        } else if (tag.startsWith("AB-INPUT-RADIO")) {
            text = this[0].getNumber();
            
        } else if (tag.startsWith("AB-INPUT-SWITCH")) {
            text = this[0].getNumber();

        } else if (tag.startsWith("AB-INPUT-TIME")) {
            text = $(this).find("input").val() + "00";

        } else if (tag.startsWith("AB-INPUT-NUMBER")) {
            text = $(this).find("input").val();
            text = text.replace(new RegExp(/[^\d]/g), "");

        } else if (tag.startsWith("AB-INPUT-DATE")) {
            if (window.isIOS || window.isAndroid) {
                text = $(this).find("input").val();
                text = text.substring(8, 10) + "" + text.substring(5, 7) + "" + text.substring(0, 4);
            } else {
                text = $(this).find("input").val();
            }

        } else if (tag.startsWith("AB-INPUT")) {
            text = $(this).find("input").val();

        } else if (tag.startsWith("AB-TEXT-AREA-UNDERLINE")) {
            text = $(this).find("textarea").val();

        } else if (tag.startsWith("AB-SELECT")) {
            text = parseInt($(this).getObject().valor);

        } else if (tag.startsWith("AB-QUESTION")) {
            text = $(this).attr("answer");
        }

        if (text && tag != "AB-SELECT-UNDERLINE") {
            text = text.replace(new RegExp(/[^\d\,]/g), "");
        }

        return text;
    };

    //funcao para corrigir o data
    $.fn.setNumber = function (text, cancel) {
        var tag = new String();
        //Tratamento
        if ($(this).length > 0) {
            tag += $(this)[0].nodeName;
            if (tag) {
                tag = tag.toUpperCase();
            }
        } else {
            return null;
        }

        if (text || text == 0) {
            //Necessario ser string para regex
            text += "";
            text = text.replace(new RegExp(/[^\d-\,]/g), "");

            if (tag == "AB-TEXT-READ-ONLY") {
                this[0].setText(text);

            } else if (tag.startsWith("AB-INPUT-CHECKBOX")) {
                this[0].setNumber(text);

                $(this).attr("loaded-value", $(this).attr("is-checked"));

            } else if (tag.startsWith("AB-INPUT-RADIO")) {
                this[0].setNumber(text);

            } else if (tag.startsWith("AB-INPUT-SWITCH")) {
                this[0].setNumber(text);

            } else if (tag.startsWith("AB-INPUT-DATE")) {
                this[0].setText(text);

            } else if (tag.startsWith("AB-INPUT")) {
                this[0].setNumber(text);

            } else if (tag.startsWith("AB-SELECT")) {
                if (cancel) {
                    $(this[0].select).val(text);
                } else {
                    $(this[0].select).val(text).change();
                }
            }

            //salva valor
            if (!tag.startsWith("AB-INPUT-CHECKBOX")) {
                $(this).attr("loaded-value", $(this).getText());
            }
        }
    };

    $.fn.setOldValue = function () {
        $(this).setText($(this).attr("loaded-value"));
    };

    $.fn.isChanged = function (val) {
        var loadedValue = $(this).attr("loaded-value");
        var currentValue = $(this).getText();

        if (loadedValue || currentValue) {
            if (loadedValue !== currentValue) {
                return true;
            } else {
                return false;
            }
        } else {
            return false;
        }
    }

    $.fn.setObject = function (val) {
        var tag = $(this)[0].nodeName;
        if (tag.startsWith("AB-SELECT")) {
            $(this).find("select").val(val).change();
        }
    }

    $.fn.getObject = function () {
        var bean = new Object();

        if ((this)[0]) {
            var tag = $(this)[0].nodeName;

            if (tag.startsWith("AB-SELECT")) {
                bean.nome = $(this).find("select option:selected").text();
                bean.valor = $(this).find("select option:selected").attr("value");
            }
        }

        return bean;
    }


    //Avisar nossos componentes quando teve uma alteracao
    var origAppend = $.fn.append;
    $.fn.append = function () {
        if ($(this).hasClass("ab-container-content") && arguments[0].hasClass("ab-block")) {
            return false;
        } else {
            return origAppend.apply(this, arguments).trigger("append");
        }
    };

    //função para retornar se o campo esrá com erro ou não
    $.fn.hasError = function () {
        if ($(this).attr("error")) {
            return true;
        } else {
            return false;
        }
    }
});


//função para arrumar bug no iOS 8
if (!String.prototype.startsWith) {
    String.prototype.startsWith = function (searchString, position) {
        position = position || 0;
        return this.indexOf(searchString, position) === position;
    };
}

String.prototype.toUpperOnlyFirstLetter = function () {
    var str = this;

    var wordMap = {
        "rg": "RG",
        "cpf": "CPF",
        "cnpj": "CNPJ",
        "rne": "RNE",
        "cep": "CEP",
        "cnh": "CNH",
        "s.a.": "S.A."
    };

    if (str && str.length == 0) {
        return "";
    } else if (str && str.length == 1) {
        return str.toUpperCase()
    } else if (str && str.length > 1) {
        str = str.substr(0, 1).toUpperCase() + str.substr(1).toLowerCase();
        return str = str.replace(/\b(rg|cpf|cnpj|rne|cep|cnh)\b|s\.a\./gi, function (word) {
            return wordMap[word.toLowerCase()];
        });
    } else {
        return "";
    }
}

String.prototype.toCamelCase = function () {
    var str = this.toLowerCase();

    var wordsArray = ["de", "sem", "o", "do", "da"];

    var words = str.split(" ");

    var fullString = new String();

    for (var i = 0; i < words.length; i++) {
        if (wordsArray.indexOf(words[i]) == -1 && words[i].length > 1) {
            words[i] = words[i].toUpperOnlyFirstLetter();
        };
    };

    fullString = words.join(" ")

    return fullString;
}

String.prototype.formatPercent = function(decimals, integers) {
    var tmp = this;
    var dec = "1";
    var formatDecimal = 0;
    var negativeCheck = false;

    if (tmp.substring(0, 1) == "-") {
        negativeCheck = true;
        tmp = tmp.substring(1, tmp.length);
    };

    if (decimals) {
        dec = dec.rpad("0", parseInt(decimals) + 1);
        formatDecimal = parseInt(decimals);
    }
    dec = parseInt(dec);

    if ((tmp && parseInt(tmp) == 0) || tmp == "" || tmp == undefined || isNaN(parseInt(tmp))) {
        tmp = 0;
    } else {
        tmp = parseFloat(tmp) / dec;
    }

    if (negativeCheck) {
        tmp = tmp * -1;
    }

    var option = {
        minimumFractionDigits: formatDecimal,
        maximumFractionDigits: formatDecimal
    };

    tmp = new Intl.NumberFormat('pt-BR', option).format(tmp);

    return tmp;
}

String.prototype.formatCurrency = function () {
    var tmp = this;
    var negativeCheck = false;

    if (tmp.substring(0, 1) == "-") {
        negativeCheck = true;
        tmp = tmp.substring(1, tmp.length);
    };

    //remove zeros a esquerda
    if (tmp) {
        // tmp = parseInt(tmp) + "";
        tmp = tmp.replace(/^0+/, '');
    }

    //Qualquer coisa diferente de um numero valido retorna 0,00
    if ((tmp && parseInt(tmp) == 0) || tmp == "" || tmp == undefined || isNaN(parseInt(tmp))) {
        return "0,00";
    }

    //Verifica se existem somente decimais, e acrescenta um zero na frente
    if (tmp && tmp.length <= 2) {
        tmp = tmp.lpad("0", 3);
    }

    //se o tamanho for
    //coloca as casas decimais
    tmp = tmp.replace(/([0-9]{2})$/g, ",$1");

    //se tiver milhar coloca ponto
    if (tmp.length > 6) {
        tmp = tmp.replace(/\B(?=(\d{3})+(?!\d))/g, ".");
    }

    if (negativeCheck == true) {
        tmp = "-" + tmp;
    }

    return tmp;
}

String.prototype.formatDate = function (options) {
    var dia = "";
    var mes = "";
    var ano = "";
    var itens = "";
    var dataFormatada = null;
    var str = this;

    if (options) {
        //options.date != "" && options.date != 0 && options.date != null
        options.date = str;

        switch (options.srcFormat) {
            case 'ddmmyyyy':
                ano = options.date.substring(4, 8);
                mes = options.date.substring(2, 4);
                dia = options.date.substring(0, 2);
                break;

            case 'yyyymmdd':
                ano = options.date.substring(0, 4);
                mes = options.date.substring(4, 6);
                dia = options.date.substring(6, 8);
                break;

            case 'dd.mm.yyyy':
                itens = options.date.split(".");
                ano = itens[2];
                mes = itens[1];
                dia = itens[0];
                break;

            case 'dd/mm/yyyy':
                itens = options.date.split("/");
                ano = itens[2];
                mes = itens[1];
                dia = itens[0];
                break;

            case 'yyyy.mm.dd':
                itens = options.date.split(".");
                ano = itens[2];
                mes = itens[1];
                dia = itens[0];
                break;

            case 'dd-mm-yyyy':
                itens = options.date.split("-");
                ano = itens[2];
                mes = itens[1];
                dia = itens[0];
                break;

            case 'yyyy-mm-dd':
                itens = options.date.split("-");
                ano = itens[0];
                mes = itens[1];
                dia = itens[2];
                break;

            case 'yyyymm':
                ano = options.date.substring(0, 4);
                mes = options.date.substring(4, 6);
                break;

            default:
                console.log("Data inválida");
        }

        switch (options.targetFormat) {
            case 'dd/mm/yyyy':
                dataFormatada = dia + '/' + mes + '/' + ano;
                break;

            case 'yyyy/mm/dd':
                dataFormatada = ano + '/' + mes + '/' + dia;
                break;

            case 'dd.mm.yyyy':
                dataFormatada = dia + '.' + mes + '.' + ano;
                break;

            case 'yyyy.mm.dd':
                dataFormatada = ano + '.' + mes + '.' + dia;
                break;

            case 'dd-mm-yyyy':
                dataFormatada = dia + '-' + mes + '-' + ano;
                break;

            case 'yyyy-mm-dd':
                dataFormatada = ano + '-' + mes + '-' + dia;
                break;

            case 'mm/yyyy':
                dataFormatada = mes + '/' + ano;
                break;

            case 'mmyy':
                dataFormatada = mes + "" + ano.substring(2, 4);
                break;

            case 'ddmmyyyy':
                dataFormatada = dia + mes + ano;
                break;

            case 'yyyymmdd':
                dataFormatada = ano + mes + dia;
                break;

            default:
                console.log("erro");
        }
    }
    return dataFormatada;
}

String.prototype.formatTime = function (options) {
    var hora = "";
    var min = "";
    var seg = "";
    var itens = "";
    var horaFormatada = null;
    var str = this;

    if (options) {
        options.time = str;

        switch (options.srcFormat) {
            case 'hhmmss':
                hora = options.time.substring(0, 2);
                min = options.time.substring(2, 4);
                seg = options.time.substring(4, 6);
                break;

            case 'hh:mm:ss':
                itens = options.time.split(":");
                hora = itens[0];
                min = itens[1];
                seg = itens[2];
                break;

            case 'hh.mm.ss':
                itens = options.time.split(".");
                hora = itens[0];
                min = itens[1];
                seg = itens[2];
                break;

            case 'hh-mm-ss':
                itens = options.time.split("-");
                hora = itens[0];
                min = itens[1];
                seg = itens[2];
                break;

            default:
                console.log("Hora inválida");
        }

        switch (options.targetFormat) {
            case 'hh:mm:ss':
                horaFormatada = hora + ':' + min + ':' + seg;
                break;

            case 'hh.mm.ss':
                horaFormatada = hora + '.' + min + '.' + seg;
                break;

            case 'hh-mm-ss':
                horaFormatada = hora + '-' + min + '-' + seg;
                break;

            case 'hhmmss':
                horaFormatada = hora + min + seg;
                break;

            default:
                console.log("erro");
        }
    }
    return horaFormatada;
}

String.prototype.formatCpf = function () {
    var cpf = this.lpad("0", 11);
    return cpf.replace(/(\d{3})(\d{3})(\d{3})(\d{2})/g, "\$1.\$2.\$3\-\$4");
}

String.prototype.formatCnpj = function () {
    var cpf = this.lpad("0", 14);
    return cpf.replace(/(\d{2})(\d{3})(\d{3})(\d{4})(\d{2})/g, "\$1.\$2.\$3\/\$4\-$5");
}


String.prototype.dateDiff = function (srcFormat, targetData, type) {

    var dataIni = new Date(this.formatDate({
        "srcFormat": srcFormat,
        "targetFormat": "yyyy/mm/dd"
    }));
    var dataFim = new Date(targetData.formatDate({
        "srcFormat": srcFormat,
        "targetFormat": "yyyy/mm/dd"
    }));

    if (type == "dia") {
        var difDias = Math.abs(dataFim.getTime() - dataIni.getTime());
        var numDias = Math.ceil(difDias / (1000 * 3600 * 24));
        return numDias;
    } else if (type == "mes") {
        var difMeses = Math.abs(dataFim.getTime() - dataIni.getTime());
        var numMeses = Math.ceil(difMeses / (1000 * 3600 * 24 * 30) - 1);
        return numMeses;
    } else if (type == 'ano') {
        var difMeses = Math.abs(dataFim.getTime() - dataIni.getTime());
        var numMeses = Math.ceil(difMeses / (1000 * 3600 * 24 * 30) - 1);
        return Math.floor(numMeses / 12);
    }
}

String.prototype.plusDays = function (srcFormat, days) {
    var dataFormatada = this.formatDate({
        "srcFormat": srcFormat,
        "targetFormat": "yyyy/mm/dd"
    });
    var dataGerada = new Date(dataFormatada);
    var dataFinal = "";
    dataGerada.setDate(dataGerada.getDate() + days);
    var mes = new String(dataGerada.getMonth() + 1).lpad('0', 2);
    var dia = new String(dataGerada.getDate()).lpad('0', 2);
    dataFinal = dia + '/' + mes + '/' + dataGerada.getFullYear();
    return dataFinal;
}

String.prototype.minusDays = function (srcFormat, days) {
    var dataFormatada = this.formatDate({
        "srcFormat": srcFormat,
        "targetFormat": "yyyy/mm/dd"
    });
    var dataGerada = new Date(dataFormatada);
    var dataFinal = "";
    dataGerada.setDate(dataGerada.getDate() - days);
    var mes = new String(dataGerada.getMonth() + 1).lpad('0', 2);
    var dia = new String(dataGerada.getDate()).lpad('0', 2);
    dataFinal = dia + '/' + mes + '/' + dataGerada.getFullYear();
    return dataFinal;
}

String.prototype.convertToNumber = function () {
    var codeString = this.substring(1, 12);
    var letter = this.substring(0, 1).toLowerCase();
    return letter.charCodeAt(0) - 96 + codeString;
}

String.prototype.lpad = function (padString, length) {
    var str = this;
    while (str.length < length)
        str = padString + str;
    return str;
}

String.prototype.getSigla = function () {
    var sigla = "";
    var name = this;

    if (name) {
        var userName = name.replace(new RegExp(/[-]/g), "");
        userName = userName.replace(new RegExp(/[\s]+/g), " ").trim();
        userName = userName.split(" ");
        var firstName = userName[0];
        var lastName = userName[userName.length - 1];
        sigla = firstName[0] + lastName[0];
    }

    return sigla;
}

String.prototype.rpad = function (padString, length) {
    var str = this;
    while (str.length < length)
        str = str + padString;
    return str;
}

String.prototype.trim = function () {
    return this.replace(/^\s+|\s+$/g, "");
}

//trimming space from left side of the string
String.prototype.ltrim = function () {
    return this.replace(/^\s+/, "");
}

//trimming space from right side of the string
String.prototype.rtrim = function () {
    return this.replace(/\s+$/, "");
}
"use strict";

$(document).ready(function () {
    $(window).on("resize", function () {
        $("ab-page").find("ab-button").each(function () {
            $(this).css("max-width", "100%");
            if ($(this).attr("width")) {
                $(this).css("width", $(this).attr("width"));
            }
        });
    });
});

class AbButton extends HTMLElement {

    constructor() {
        super();

        this.button = document.createElement("button");
        this.span = document.createElement("span");
        this.img = document.createElement("div");
        this.blocker = document.createElement("div");

        this.mainClass = "ab-button";

    }

    _render() {
        //coloca classe
        this.classList.add(this.mainClass);

        var id = generateID();
        if (this.hasAttribute("id")) {
            //description: Identificador único do objeto, com prefixo "btn"| Alfanumérico |não| randômico|
            id = this.getAttribute("id");
        } else {
            this.setAttribute("id", id);
        }

        //Coloca os atributos no objeto
        if (this.hasAttribute("width")) {
            //description: Largura do botão| Alfanumérico| não| auto |
            this.style.width = this.getAttribute("width");
        }

        // if (this.hasAttribute("height")) {
        //     //description: Altura do botão| Alfanumérico| não| auto |
        //     this.style.height = this.getAttribute("height");
        // }

        if (this.getAttribute("last-button") == "true") {
            //description: Ultimo botão da página | Boolean | não | false |
            this.classList.add("ab-button-last-button");
        }

        //verifica width-on-bigscreen
        if ($("ab-page").attr("fullscreen") == "true") {
            if (this.hasAttribute("width-on-bigscreen")) {
                //description: Largura do componente em telas maiores| % ou px| não| |
                this.style.width = this.getAttribute("width-on-bigscreen");
            } else {
                this.style.maxWidth = "340px";
            }
        }

        //Cria botao
        this.button.setAttribute("id", id + "btn_button");
        this.appendChild(this.button);

        // adiciona o texto inserido no objeto para o span criado
        this.span.setAttribute("id", id + "btn_span");

        if (this.hasAttribute("label")) {
            //description: Colocar um texto no botão| Alfanumérico| sim| vazio|
            this.span.innerText = this.getAttribute("label").toUpperOnlyFirstLetter();
        }
        this.button.appendChild(this.span);

        // adiciona a imagem inserida no objeto no background de uma div
        this.img.setAttribute("div-image", "true");
        this.img.setAttribute("id", id + "btn_img");
        this.button.insertAdjacentElement("afterbegin", this.img);
        if (this.hasAttribute("icon") || this.hasAttribute("icon-class")) {
            this.img.style.backgroundImage = "url(" + this.getAttribute("icon") + ")";
            if (this.hasAttribute("icon-class")) {
                this.img.classList.add(this.getAttribute("icon-class"));
            }
        } else {
            this.img.style.display = "none";
        }

        // verifica se o botão é somente para mostrar o ícone e adiciona a classe
        if (this.getAttribute("icon-button") == "true") {
            //values: true;false
            //description: Trava o botão para ter somente o ícone| true ou false| não| false|
            this.classList.add("ab-button-img");
        }

        // verifica se tem o tamanho do icone e adiciona no tamanho do background
        if (this.hasAttribute("icon-size")) {
            //description: Altera o tamanho do icone| Número em px| não| |
            this.img.style.backgroundSize = this.getAttribute("icon-size");
        }

        // verifica se tem o tamanho do espaço do ícone e define a largura da div
        if (this.hasAttribute("icon-space-width")) {
            //description: Espaçamento do ícone com o texto| Número em px| não| |
            this.img.style.width = this.getAttribute("icon-space-width");
        }

        //Coloca cor no botao
        if (this.hasAttribute("theme")) {
            //values: normal;light;keyboard;keyboard-ok;dark-rounded;red-rounded;dark;vk
            //description: Altera a cor do componente| [[#Temas | Ver temas]]| não | vazio|
            this.classList.add("ab-button-" + this.getAttribute("theme"));
        } else if (this.getAttribute("theme") == "ab-button-keyboard") {
            this.classList.add("ab-button-keyboard");
        } else {
            this.classList.add("ab-button-normal");
        }

        if (this.getAttribute("position") == "center") {
            //values: center;right;left
            //description: Posição do botão| Center, right ou left| não| center|
            if (pmb.utils.showBigScreen(top.$("body")) == true) {
                this.classList.add("ab-button-center-big");
            } else {
                this.classList.add("ab-button-center");
            }
        } else if (this.getAttribute("position") == "left") {
            //não faz nada
        } else if (this.getAttribute("position") == "right") {
            this.style.float = this.getAttribute("position");
        }

        //verifica se tem max width
        if (this.hasAttribute("max-width")) {
            //description: Largura máxima do botão| Número em px| não| |
            this.style.maxWidth = this.getAttribute("max-width");
        }

        this.blocker.classList.add("ab-button-block");
        this.blocker.setAttribute("id", id + "btn_iblocker");
        this.appendChild(this.blocker);

        if (this.getAttribute("is-disabled") == "true") {
            //values: true;false
            this.button.setAttribute("disabled", "disabled");
            this.blocker.style.display = "block";
        }

        if (this.getAttribute("is-blocked") == "true") {
            //values: true;false
            this.blocker.style.display = "block";
        }

        if (this.getAttribute("visibility") == "hidden") {
            //values: hidden;show
            this.style.display = "none";
        }

        //Mesmo comportamento porém com outro nome de atributo, necessário ajustar todos projetos que usam o de cima
        if (this.getAttribute("visible") == "false") {
            //values: true;false
            this.style.display = "none";
        }

        //Limpa variaveis
        id = null;
    }

    _addEvent() {
        var button = $(this.button);
        var _this = this;

        // altera o ícone do botão quando o botão é apertado e se é passado o atributo icon-active
        button.on("touchstart mousedown", function (e) {

            //Proibe o clique em dois botões ao mesmo tempo
            if (e && e.originalEvent && e.originalEvent.touches && e.originalEvent.touches.length > 1) {
                return;
            };

            //tira o foco de qualquer elemento
            document.activeElement.blur();
            $(window).focus();

            if (_this.getAttribute("is-disabled") == "false" || !_this.hasAttribute("is-disabled")) {
                //se tiver especificado icon-active adiciona no lugar do normal quando o evento inicia
                if (_this.hasAttribute("icon-active")) {
                    //description: Caminho do ícone que aparecerá quando o botão for ativado. | Alfanumérico| não| vazio|
                    if (_this.hasAttribute("icon-active")) {
                        _this.img.style.backgroundImage = "url(" + _this.getAttribute("icon-active") + ")";
                    }
                }
                // se tiver tema adiciona o tema no objeto
                if (_this.hasAttribute("theme")) {
                    _this.classList.add("ab-button-" + _this.getAttribute("theme") + "-active");
                } else {
                    _this.classList.add("ab-button-normal-active");
                };
            };
        });

        // altera o ícone do botão quando o botão é solto e se é passado o atributo icon-active
        button.on("mouseup touchend", function (e) {
            e.preventDefault();

            //tira o foco de qualquer elemento
            document.activeElement.blur();
            $(window).focus();

            if (_this.getAttribute("is-disabled") == "false" || !_this.hasAttribute("is-disabled")) {
                //retorna o icone para o normal quando o evento termina
                if (_this.hasAttribute("icon-active")) {
                    if (_this.hasAttribute("icon")) {
                        _this.img.style.backgroundImage = "url(" + _this.getAttribute("icon") + ")";
                    }
                }
                //retira o tema adicionado
                if (_this.hasAttribute("theme")) {
                    _this.classList.remove("ab-button-" + _this.getAttribute("theme") + "-active");
                } else {
                    _this.classList.remove("ab-button-normal-active");
                }
            }
        });

        //ação quando o mouse ou o touch deixar a área do objeto botão
        button.on("mouseleave touchleave", function (e) {
            e.preventDefault();

            if (_this.getAttribute("is-disabled") == "false" || !_this.hasAttribute("is-disabled")) {
                //retorna o icone para o normal quando o evento termina
                if (_this.hasAttribute("icon-active")) {
                    if (_this.hasAttribute("icon")) {
                        _this.img.style.backgroundImage = "url(" + iconActive + ")";
                    }
                }
                //retira o tema adicionado
                if (_this.hasAttribute("theme")) {
                    _this.classList.remove("ab-button-" + _this.getAttribute("theme") + "-active");
                } else {
                    _this.classList.remove("ab-button-normal-active");
                }
            }
        });

        $(this.blocker).on("tap", function (e) {
            e.preventDefault();
            e.stopPropagation();

            return false;
        });


    }

    connectedCallback() {
        if (!this.classList.contains(this.mainClass)) {
            /*this.shadowDom = this.attachShadow({ mode: 'open' }); */
            this._render();
            this._addEvent();
        }
    }

    static get observedAttributes() {
        return ["is-disabled", "label", "theme", "icon", "icon-class", "width", "icon-button", "icon-size", "icon-space-width", "visibility", "visible", "position", "width-on-bigscreen", "id", "max-width", "is-blocked"];
    }

    attributeChangedCallback(attrName, oldVal, newVal) {

        switch (attrName) {
            case "is-disabled":
                //Quando is-disable = true, desabilita o botão
                if (newVal == "true") {
                    this.button.setAttribute("disabled", "disabled");
                    this.blocker.style.display = "block";
                } else {
                    //Se o novo valor não habilitar o disable, ele retira as classes de active e remove o disable do botão
                    if (this.hasAttribute("theme")) {
                        this.classList.remove("ab-button-" + this.getAttribute("theme") + "-active");
                    } else {
                        this.classList.remove("ab-button-normal-active");
                    }

                    this.button.removeAttribute("disabled");
                    this.blocker.style.display = "none";
                }

                break;

            case "label":
                this.span.innerText = newVal.toUpperOnlyFirstLetter();
                break;

            case "theme":
                this.classList.remove("ab-button-" + oldVal);
                this.classList.remove("ab-button-normal");
                this.classList.add("ab-button-" + newVal);
                break;

            case "icon":
                this.img.style.display = "inline-block";
                this.img.style.backgroundImage = "url(" + newVal + ")";
                break;

            case "icon-class":
                this.img.style.display = "inline-block";
                this.img.classList.add(newVal);
                break;

            case "width":
                this.style.width = newVal;
                break;

            case "icon-button":
                if (newVal == "true") {
                    this.classList.add("ab-button-img");
                } else {
                    this.classList.remove("ab-button-img");
                }
                break;

            case "icon-size":
                this.img.style.backgroundSize = newVal;
                break;

            case "icon-space-width":
                this.img.style.width = newVal;
                break;

            case "visibility":
                if (newVal == "show") {
                    this.style.display = "table";
                } else if (newVal == "hidden") {
                    this.style.display = "none";
                }
                break;

            case "visible":
                if (newVal == "true") {
                    this.style.display = "table";
                } else if (newVal == "false") {
                    this.style.display = "none";
                }
                break;

            case "position":
                if (newVal == "center") {
                    if (pmb.utils.showBigScreen(top.$("body")) == true) {
                        this.classList.add("ab-button-center-big");
                    } else {
                        this.classList.add("ab-button-center");
                    }
                } else if (newVal == "right") {
                    this.style.float = newVal;
                }
                break;

            case "width-on-bigscreen":
                if (pmb.utils.showBigScreen(top.$("body"))) {
                    this.style.width = newVal;
                }
                break;

            case "id":
                this.img.setAttribute("id", newVal + "btn_img");
                this.button.setAttribute("id", newVal + "btn_button");
                this.span.setAttribute("id", newVal + "btn_span");
                this.blocker.setAttribute("id", newVal + "btn_iblocker");
                break;

            case "max-width":
                this.style.maxWidth = newVal;
                break;

            case "is-blocked":
                //Trata a alteração do atributo is-disable
                //Quando is-disable = true, desabilita o botão
                if (newVal == "true") {
                    this.blocker.style.display = "block";
                } else {
                    //Se o novo valor não habilitar o disable, ele retira as classes de active e remove o disable do botão
                    if (this.hasAttribute("theme")) {
                        this.classList.remove("ab-button-" + this.getAttribute("theme") + "-active");
                    } else {
                        this.classList.remove("ab-button-normal-active");
                    }
                    this.blocker.style.display = "none";
                }
                break;

            default:
                break;
        }
    }
}
customElements.define("ab-button", AbButton);
"use strict";

$(document).ready(function () {
    $(window).on("resize", function () {
        $("ab-page").find("ab-box").each(function () {
            if ($(this).attr("width")) {
                $(this).css("width", $(this).attr("width"));
            } else {
                $(this).css("width", "100%");
            };
        });
    });
});

class AbBox extends HTMLElement {

    constructor() {
        super();

        this.boxHeader = document.createElement("header");
        this.boxHeaderText = document.createElement("p");
        this.divFooter = document.createElement("footer");

        this.mainClass = "ab-box";
        
    }

    _render() {
        var id = generateID();
        if (this.hasAttribute("id")) {
            //description: Identificador único do objeto, com prefixo "box" | Alfanumérico | Não | Normal |
            id = this.getAttribute("id");
        } else {
            this.setAttribute("id", id);
        }

        $(this).addClass("ab-box");

       // style.innerText = " .ab-box[status='analise'] { --border-status: 8px solid var(--box-status-analise); } .ab-box[status='ativo'] { --border-status: 8px solid var(--box-status-ativo); } .ab-box[status='inativo'] { --border-status: 8px solid var(--box-status-inativo); } .ab-box[status='cancelado'] { --border-status: 8px solid var(--box-status-cancelado); } :host(.ab-box) { box-sizing: border-box; display: inline-block; overflow: hidden; float: left; margin: 8px; width: -webkit-calc(100% - 16px); width: -moz-calc(100% - 16px); width: -o-calc(100% - 16px); width: calc(100% - 16px); border-radius: 5px; border-left: var(--border-status); box-shadow: var(--shadow-lv2); } .ab-box-content { box-sizing: border-box; padding: 8px; display: var(--boxDisp); justify-content: space-between; align-items: center; background-color: var(--bg-components); height: initial; overflow: hidden; float: var(--boxFloat); width: 100%; position: relative; } :host(.ab-box-expandable) .ab-box-content { padding: 8px; } .ab-box-footer { float: left; height: 40px; width: 100%; background-size: 20px; background-repeat: no-repeat; background-position: center; bottom: 0px; left: 8px; background-color: var(--bg-components); cursor: pointer; } :host(.ab-box-closed) :host(.ab-box-opened) .ab-box-content { max-height: 9000% !important; } :host(.ab-box-opened) .ab-box-form .ab-box-content { max-height: 100px } .ab-box-content::slotted(label) { font-size: 13px; font-family: 'ablinkmedium'; line-height: 18px; color: var(--cor-pri-text); display: block; width: 100%; padding: 8px; box-sizing: border-box; float: left; } .ab-box-title { box-sizing: border-box; display: inline-block; background-color: var(--bg-components); height: 50px; float: left; width: 100%; } .ab-box-title-text { line-height: 50px; box-sizing: border-box; font-size: 16px; font-family: 'ablinksemiboldregular'; font-weight: normal; color: var(--cor-titulo); float: left; padding-left: 8px; margin: 0px; } .ab-box-div-buttons { float: left; display: table; width: 100%; table-layout: fixed; vertical-align: top; background-color: var(--bg-components); margin-top: -5px; padding: 0px 16px 16px 16px; box-sizing: border-box; z-index: 1; position: relative; } br { line-height: 20px; }";

        if (this.getAttribute("theme") == 'flex'){
            $(this).addClass("ab-box__flex");            
        } else if (this.getAttribute("theme") == 'ativo'){
            $(this).addClass("ab-box__ativo");            
        } else if (this.getAttribute("theme") == 'inativo'){
            $(this).addClass("ab-box__inativo");
        } else if (this.getAttribute("theme") == 'dark'){
            $(this).addClass("ab-box__dark");
        }



        //Classe base
        this.classList.add(this.mainClass);

        //Coloca titulo
        this.boxHeader.setAttribute("id", id + "_div_title");
        this.boxHeader.classList.add("ab-box-title");


        this.boxHeader.appendChild(this.boxHeaderText);
        this.boxHeaderText.setAttribute("id", id + "_div_text");
        this.boxHeaderText.classList.add("ab-box-title-text");

        if (this.hasAttribute("title")) {
            //description: Coloca um título | Alfanumérico | não |não|
            this.boxHeaderText.innerText = this.getAttribute("title");
        } else {
            this.boxHeader.style.display = "none";
        }


        if (this.hasAttribute("max-width")) {
            //description: Define o tamanho máximo | Tamanho em pixel | não |100%|
            this.style.maxWidth = this.getAttribute("max-width");
        }

        if (this.hasAttribute("width")) {
            //description: Ativa ou desativa o max-width | true ou false| não|false|
            this.style.width = this.getAttribute("max-width");
        }

        //div para fazer a seta que expande o box
        this.divFooter.setAttribute("id", id + "_footer");
        this.divFooter.classList.add("ab-box-footer");

        //verifica se existe a altura inicial, considerado para expandir
        if (this.hasAttribute("initial-height")) {
            //description: Define a altura inicial do componente quando precisa ser expandido| 100px, 200px, 300px| não|não|

            //adicionando classes para considerar o footer
            this.classList.add("ab-box-expandable");

            if (!this.hasAttribute("is-opened")) {
                this.classList.add("ab-box-closed");
            }
        } else {
            this.divFooter.style.display = "none";
        }

        if (this.getAttribute("visibility") == "hidden") {
            //values: hidden
            //description: Se o parâmetro estiver presente com o valor "hidden", esconde o objeto | hidden | não| não|
            this.style.display = "none";
        }

        if (this.hasAttribute("width-on-bigscreen")) {
            //description: Define uma largura para quando estiver em tela grande (tablets, pc) | Numérico | não| não|
            if ($("ab-page").attr("fullscreen") == "true"){
                this.style.width = this.getAttribute("width-on-bigscreen");
            }
        }

        if (this.hasAttribute("status")) {
            this.boxHeader.setAttribute("status", this.getAttribute("status"));
            this.divFooter.setAttribute("status", this.getAttribute("status"));
        }

        //for legacy substituir todos os h1 dos box por h3
        for (const element of this.children) {
            if (element.tagName == "H1") {
                element.outerHTML = element.outerHTML.replace(/h1/g,"h3");
            }            
        }
    }

    _addEvent() {
        var _this = this;

        $(this.divFooter).on("tap", function (e) {
            e.preventDefault();
            e.stopPropagation();

            if (_this.getAttribute("is-opened") == "true") {
                //values: true;false
                //description: Se possuir initial-height, inicia aberto ou fechado | true ou false | não | false|
                _this.setAttribute("is-opened", "false");
            } else {
                _this.setAttribute("is-opened", "true");
            }
        });

    }


    connectedCallback() {
        if (!this.classList.contains("ab-box")) {
            this._render();
            this._addEvent();
        }
    }

    static get observedAttributes() {
        return ["is-opened", "max-width", "title", "theme", "initial-height", "id", "visibility", "width-on-bigscreen", "status"];
    }

    attributeChangedCallback(attrName, oldVal, newVal) {
        switch (attrName) {
            case "is-opened":
                if (newVal == "true") {
                    this.classList.add("ab-box-opened");
                    this.classList.remove("ab-box-closed");
                } else if (newVal == "false") {
                    this.classList.add("ab-box-closed");
                    this.classList.remove("ab-box-opened");
                }
                break;
    
            case "max-width":
                if (newVal) {
                    this.style.maxWidth = newVal;
                } else {
                    this.style.maxWidth = "";
                }
                break;
    
            case "title":
    
                if (newVal) {
                    this.boxHeader.style.display = "block";
                    this.boxHeaderText.innerText = newVal;
                } else {
                    this.boxHeader.style.display = "none";
                    this.boxHeaderText.innerText = "";
                }
                break;
    
            case "theme":
                if (newVal) {
                    this.boxHeader.classList.add("ab-box-title-" + newVal);
                    this.divFooter.classList.add("ab-box-footer-" + newVal);
                } else {
                    this.boxHeader.classList.remove("ab-box-title-" + oldVal);
                    this.divFooter.classList.remove("ab-box-footer-" + newVal);
                }
                break;
    
            case "initial-height":
                //adiciona a altura inicial na altura do objeto
                //seta Max height
                if (newVal) {
                    this.classList.add("ab-box-expandable");
                    this.divFooter.style.display = "block";
                } else {
                    this.classList.remove("ab-box-expandable");
                    this.divFooter.style.display = "none";
                }
    
                //Box aberto ou fechado
                if (this.getAttribute("is-opened") == "false" || !this.hasAttribute("is-opened")) {
                    this.classList.add("ab-box-closed");
                } else {
                    this.classList.remove("ab-box-closed");
                }
                break;
    
            case "id":
                //muda ids
                this.boxHeader.setAttribute("id", newVal + "_div_title");
                this.boxHeaderText.setAttribute("id", newVal + "_div_text");
                this.divFooter.setAttribute("id", newVal + "_footer");
                break;
    
            case "visibility":
                if (newVal == "show") {
                    this.style.display = "inline-block";
                } else if (newVal == "hidden") {
                    this.style.display = "none";
                }
                break;
    
            case "width-on-bigscreen":
                if ($("ab-page").attr("fullscreen") == "true"){
                    this.style.width = newVal;
                }
                break;

            case "status":
                this.boxHeader.setAttribute("status", newVal);
                this.divFooter.setAttribute("status", newVal);
                break;
        
            default:
                break;
        }
    }


}
customElements.define('ab-box', AbBox);
"use strict";

$(document).ready(function () {
    $(window).on("resize", function () {
        $("ab-page").find("ab-checkbox").each(function () {
            if ($(this).attr("width-on-bigscreen")) {
                if ($(this).attr("width")) {
                    $(this).css("width", $(this).attr("width"));
                } else {
                    $(this).css("width", "100%");
                }
            }
        });
    });
});

class AbCheckbox extends HTMLElement {

    constructor() {
        super();

        this.checkspace = document.createElement("div");
        this.spanLabel = document.createElement("span");
        this.spanSubtitle = document.createElement("span");

        this.mainClass = "ab-checkbox";

        this._addEvent();
    }

    _render() {
        //coloca classe
        this.classList.add(this.mainClass);

        //Cria um id
        let id = generateID();
        if (this.hasAttribute("id")) {
            //description: Define se a checkbox já estará selecionada| Boolean | não| false|
            id = this.getAttribute("id");
        } else {
            this.setAttribute("id", id);
        }

        //armazena o conteúdo passado no html
        let conteudo = this.innerHTML;
        this.innerHTML = "";

        //Coloca os atributos no objeto
        if (this.hasAttribute("width")) {
            //description: Largura do componente (afeta somente o espaço que terá para text, não altera o tamanho da checkbox)| % ou px| não| 100%|
            this.style.width = this.getAttribute("width");
            this.style.maxWidth = this.getAttribute("width");
        }

        //Obrigatorio checagem abaixo do width
        if (this.hasAttribute("width-on-bigscreen")) {
            //description: Define a largura do compenente em telas maiores (afeta somente o espaço que terá para text, não altera o tamanho da checkbox)| % ou px| não| |
            if (pmb.utils.showBigScreen(top.$("body"))) {
                this.style.width = this.getAttribute("width-on-bigscreen");
            }
        }

        //Cria check
        this.checkspace.classList.add("ab-checkbox-checkspace");
        this.checkspace.setAttribute("id", id + "chk_checkbox");
        this.appendChild(this.checkspace);

        //insere o conteúdo no objeto
        this.spanLabel.classList.add("ab-checkbox-title");
        this.spanLabel.setAttribute("content-area", "true")
        this.spanLabel.setAttribute("id", id + "chk_label");
        if (conteudo) {
            this.spanLabel.innerHTML = conteudo;
        } else {
            if (this.hasAttribute("label")) {
                //description: Label do componente |  | não | |
                this.spanLabel.innerText = this.getAttribute("label");
            }
        }
        this.appendChild(this.spanLabel);

        this.spanSubtitle.classList.add("ab-checkbox-subtitle");
        this.spanSubtitle.setAttribute("id", id + "chk_subtitle");
        this.spanSubtitle.innerText = this.getAttribute("subtitle");
        this.appendChild(this.spanSubtitle);

        //Define se deverá ser alinhado a direita
        if (this.getAttribute("position") == "right") {
            //values: left;right
            //description: Define para onde estará posicionado o checkbox| Posição | não| left|
            this.style.float = this.getAttribute("position");
            this.style.paddingRight = "15px";
        }

        if (this.getAttribute("is-disabled") == "true") {
            //values: true;false
            //description: Define se a checkbox estará desativada| Boolean | não| false|
            this.checkspace.setAttribute("disabled", "disabled");
            this.classList.add("ab-checkbox-disabled");
        }

        //verifica se tem max width
        if (this.hasAttribute("max-width")) {
            //description: Largura máxima do componente | % ou px | não | |
            this.style.maxWidth = this.getAttribute("max-width");
        }

        if (this.hasAttribute("subtitle")) {
            //description: Subtitulo do componente |  | não | |
            this.spanSubtitle.innerText = this.getAttribute("subtitle");
        }

        //Limpa variaveis
        id = null;
        conteudo = null;
    }

    _addEvent() {
        let _this = this;
        $(this).on("tap", function (e) {
            e.preventDefault();

            if (_this.getAttribute("is-disabled") == "false" || !_this.hasAttribute("is-disabled")) {
                if (_this.getAttribute("is-checked") == "true") {
                    _this.setAttribute("is-checked", "false");
                } else {
                    _this.setAttribute("is-checked", "true");
                }
            }

            //Chama a funcao
            if (_this.hasAttribute("onvalidate")) {
                let fn = window[_this.getAttribute("onvalidate")];
                if (typeof fn === 'function') {
                    fn.call($(_this));
                } else {
                    fn = new Function(_this.getAttribute("onvalidate"));
                    fn.call($(_this));
                }
            }
        });
    }

    connectedCallback() {
        if (!this.classList.contains(this.mainClass)) {
            /*this.shadowDom = this.attachShadow({ mode: 'open' }); */
            this._render();
        }
    }

    static get observedAttributes() {
        return ["is-disabled", "is-checked", "width", "width-on-bigscreen", "id", "subtitle", "label"];
    }

    attributeChangedCallback(attrName, oldVal, newVal) {

        switch (attrName) {
            case "is-disabled":
                if (newVal == "true") {
                    this.checkspace.setAttribute("disabled", "disabled");
                    this.classList.add("ab-checkbox-disabled");
                } else {
                    this.checkspace.removeAttribute("disabled");
                    this.classList.remove("ab-checkbox-disabled");
                }
                break;

            case "is-checked":
                //Quando is-disable = true, desabilita o botão
                if (newVal == "true") {
                    this.classList.remove("ab-checkbox-checkspace-middle");
                    this.classList.add("ab-checkbox-checkspace-checked");
                } else if (newVal == "neutral") {
                    this.classList.remove("ab-checkbox-checkspace-checked");
                    this.classList.add("ab-checkbox-checkspace-middle");
                } else {
                    this.classList.remove("ab-checkbox-checkspace-middle");
                    this.classList.remove("ab-checkbox-checkspace-checked");
                }

                if (this.getAttribute("cancel-callback") != "true") {
                    if (this.hasAttribute("onchange")) {
                        let fn = window[this.getAttribute("onchange")];
                        if (typeof fn === 'function') {
                            fn.call($(this));
                        }
                    }
                }
                break;

            case "width":
                this.style.width = newVal;
                break;

            case "width-on-bigscreen":
                if (pmb.utils.showBigScreen(top.$("body"))) {
                    this.style.width = newVal;
                }
                break;

            case "id":
                this.checkspace.setAttribute("id", newVal + "chk_checkbox");
                this.spanLabel.setAttribute("id", newVal + "chk_label");
                this.spanSubtitle.setAttribute("id", newVal + "chk_subtitle");
                break;

            case "subtitle":
                this.spanSubtitle.innerText = newVal;
                break;

            case "label":
                this.spanLabel.innerHTML = newVal;
                break;

            default:
                break;
        }
    }

    setText(text) {
        this.spanLabel.innerHTML = text;
    }

    getText() {
        return this.spanLabel.innerText;
    }

    setNumber(text) {
        if (text == 1 || text == true) {
            this.setAttribute("is-checked", "true");
        } else {
            this.setAttribute("is-checked", "false");
        }
    }

    getNumber() {
        if (this.getAttribute("is-checked") == "true") {
            return "1";
        } else if ($(this).attr("is-checked") == "false") {
            return "0";
        }
    }
}
customElements.define("ab-checkbox", AbCheckbox);
"use strict";

$.fn.incrementRequest = function () {
    var curr = 0;
    if (this.attr("current-request")) {
        curr = parseInt(this.attr("current-request"));
    }

    curr++;
    this.attr("current-request", curr);
}

$.fn.resetRequest = function () {
    this.removeAttr("current-request");
}

class AbPage extends HTMLElement {

    constructor() {
        super();

        this.htmlObj = $("html,body")[0];

        //pageLoader
        this.pageLoad = document.createElement("div");
        this.wrapper = document.createElement("div");
        this.loadBar = document.createElement("div");
        this.barRange = document.createElement("div");
        this.loadText = document.createElement("p");

        this.mainClass = "ab-page";
    }

    _render() {
        this.classList.add(this.mainClass);

        //Cria um id
        if (!this.hasAttribute("id")) {
            //description: Atributo para identificar o objeto| Alfanumérico| não| vazio|
            this.setAttribute("id", generateID());
        }

        // parametros
        if (this.getAttribute("fullscreen") != "false") {
            //values: true;false
            //description: Usa o tamanho total da tela | true ou false | não | true |
            this.htmlObj.style.margin = "0px";
            this.htmlObj.style.padding = "0px";
            this.htmlObj.style.width = "100%";
            this.htmlObj.style.height = "100%";

            this.style.top = "0px";
            this.style.left = "0px";
            this.style.bottom = "0px";
            this.style.right = "0px";
            this.style.height = "100%";
            this.style.width = "100%";
            this.style.position = "fixed";
        } else{
            $(this).addClass("page--limited");
        }

        // Valor padrao
        this.style.zIndex = "0";

        //se existir um max-request, construir o sistema de load
        if (this.hasAttribute("max-request")) {
            //description: Máximo de requests que terá na página para o loader | Numérico | não | 0 |
            this._createLoader();
        } else{
            document.querySelector("html").classList.add("html-page-loaded");
        }

    }

    connectedCallback() {
        if (!this.classList.contains(this.mainClass)) {
            /*this.shadowDom = this.attachShadow({
                mode: 'open'
            }); */
            this._render();
        }
    }

    static get observedAttributes() {
        return ["loader-visibility", "current-request"];
    }

    attributeChangedCallback(attrName, oldVal, newVal) {
        if (attrName == "loader-visibility") {
            if (newVal != "true") {
                $(this.logo).fadeOut(100, function () {
                    this.remove();
                });

                $(this.pageLoad).fadeOut(100, function () {
                    this.remove();
                });
            } else if (this.pageLoad.length == 0) {
                this._createLoader();
            } else {
                $(this.pageLoad).fadeIn(100);
            }

        } else if (attrName == "current-request") {
            var reqAtual = parseInt(newVal);
            var reqMax = parseInt(this.getAttribute("max-request"));
            var total = ((100 / reqMax) * reqAtual);

            this.barRange.style.width = total + "%";

            if (total >= 100) {
                this.setAttribute("loader-visibility", "false");
                document.querySelector("html").classList.add("html-page-loaded");
            }

            reqAtual = null;
            reqMax = null;
            total = null;
        }
    }

    _createLoader() {

        this.pageLoad.classList.add("ab-page-loader");
        this.pageLoad.setAttribute("id", "ab-page-loader");
        this.pageLoad.style.display = "block";
        this.appendChild(this.pageLoad);

        this.wrapper.classList.add("ab-page-loader-wrapper");
        this.pageLoad.appendChild(this.wrapper);

        this.loadBar.classList.add("ab-page-loader-path");
        this.wrapper.appendChild(this.loadBar);

        this.barRange.classList.add("ab-page-loader-range");
        this.barRange.setAttribute("id", "ab-page-loader-range");
        this.loadBar.appendChild(this.barRange);

        this.loadText.classList.add("ab-page-loader-text");
        this.loadText.innerText = "carregando...";
        this.wrapper.appendChild(this.loadText);
    }
}
customElements.define('ab-page', AbPage);
"use strict";

$(document).ready(function () {
    $(window).on("resize", function () {
        $("ab-page").find("ab-text-read-only").each(function () {
            if ($(this).attr("width-on-bigscreen")) {
                if ($("ab-page").attr("fullscreen") == "true"){
                    $(this).css("width", $(this).attr("width-on-bigscreen"));
                    $(this).addClass("bradesco-text-read-only-bigscreen");
                } else {
                    $(this).removeClass("bradesco-text-read-only-bigscreen")
                    if ($(this).attr("width")) {
                        $(this).css("width", $(this).attr("width"));
                    } else {
                        $(this).css("width", "100%");
                    }
                }
            }
        });
    });
});


class AbTextReadOnly extends HTMLElement {

    constructor() {
        super();

        this.label = document.createElement("legend");
        this.text = document.createElement("p");

        this.mainClass = "ab-text-read-only";
    }

    _render() {
        //Cria um id
        var id = generateID();
        if (this.hasAttribute("id")) {
            //description: Identificação do componente. Atributo obrigatório para interagir com o objeto | Alfanumérico | sim | vazio |
            id = this.getAttribute("id");
        } else {
            this.setAttribute("id", id);
        };

        var contentHtml = this.innerHTML ;
        this.innerHTML = "";

        //coloca classe
        this.classList.add(this.mainClass);

        //width
        if (this.hasAttribute("width")) {
            //description: Define a largura do componente| % ou px| não| |
            this.style.width = this.getAttribute("width");
        };

        //verifica width-on-bigscreen
        if (this.hasAttribute("width-on-bigscreen")) {
            //description: Define a largura do componente em telas maiores| % ou px| não| |
            if (pmb.utils.showBigScreen(top.$("body"))) {
                this.classList.add("ab-text-read-only-bigscreen")
                this.style.width = this.getAttribute("width-on-bigscreen");
            } else {
                this.classList.remove("ab-text-read-only-bigscreen")
            }
        };

        //Coloca Label
        this.label.setAttribute("id", id + "label");

        if (this.hasAttribute("label")) {
            //description: Colocar uma descrição que represente o valor que será colocado no input da página | Alfanumérico | não | vazio |
            this.label.innerText = this.getAttribute("label");
        }
        this.appendChild(this.label);

        //Coloca Input
        this.text.classList.add("ab-paragrafo-medio");
        this.text.setAttribute("id", id + "text");
        if (contentHtml.length > 0) {
            this.text.innerHTML = contentHtml;
        }
        this.appendChild(this.text);

        //visible
        if (this.getAttribute("visible") == "false") {
            //values: true;false
            //description: Define se o componente estará visível | Boolean | não| true |
            this.style.display = "none";
        };

        //limpa variaveis
        id = null;
        contentHtml = null;
    }

    connectedCallback() {
        if (!this.classList.contains(this.mainClass)) {
            /*this.shadowDom = this.attachShadow({
                mode: 'open'
            }); */
            this._render();
        }
    }

    static get observedAttributes() {
        return ["label", "id", "width", "width-on-bigscreen", "visible"];
    }

    attributeChangedCallback(attrName, oldVal, newVal) {

        switch (attrName) {
            case "label":
                this.label.innerText = newVal;
                break;
    
            case "id":
                this.label.setAttribute("id", newVal + "label");
                this.text.setAttribute("id", newVal + "text");
                break;
    
            case "width":
                this.style.width = newVal;
                break;
    
            case "width-on-bigscreen":
                if ($("ab-page").attr("fullscreen") == "true"){
                    this.style.width = this.getAttribute("width-on-bigscreen");
                }
                break;
    
            case "visible":
                if (newVal == "true") {
                    this.style.display = "inline-block";
                } else if (newVal == "false") {
                    this.style.display = "none";
                }
                break;
        
            default:
                break;
        }
    }

    setText(text) {
        this.text.innerHTML = text;
    }

    getText() {
        return this.text.innerText;
    }

    getText() {
        return this.text.innerText;
    }

    setHtml() {

    }
}
customElements.define('ab-text-read-only', AbTextReadOnly);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
